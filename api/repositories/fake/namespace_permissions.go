// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/cf-k8s-controllers/api/authorization"
	"code.cloudfoundry.org/cf-k8s-controllers/api/repositories"
)

type NamespacePermissions struct {
	AuthorizedInStub        func(context.Context, authorization.Identity, string) (bool, error)
	authorizedInMutex       sync.RWMutex
	authorizedInArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Identity
		arg3 string
	}
	authorizedInReturns struct {
		result1 bool
		result2 error
	}
	authorizedInReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	GetAuthorizedOrgNamespacesStub        func(context.Context, authorization.Info) (map[string]bool, error)
	getAuthorizedOrgNamespacesMutex       sync.RWMutex
	getAuthorizedOrgNamespacesArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
	}
	getAuthorizedOrgNamespacesReturns struct {
		result1 map[string]bool
		result2 error
	}
	getAuthorizedOrgNamespacesReturnsOnCall map[int]struct {
		result1 map[string]bool
		result2 error
	}
	GetAuthorizedSpaceNamespacesStub        func(context.Context, authorization.Info) (map[string]bool, error)
	getAuthorizedSpaceNamespacesMutex       sync.RWMutex
	getAuthorizedSpaceNamespacesArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
	}
	getAuthorizedSpaceNamespacesReturns struct {
		result1 map[string]bool
		result2 error
	}
	getAuthorizedSpaceNamespacesReturnsOnCall map[int]struct {
		result1 map[string]bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *NamespacePermissions) AuthorizedIn(arg1 context.Context, arg2 authorization.Identity, arg3 string) (bool, error) {
	fake.authorizedInMutex.Lock()
	ret, specificReturn := fake.authorizedInReturnsOnCall[len(fake.authorizedInArgsForCall)]
	fake.authorizedInArgsForCall = append(fake.authorizedInArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Identity
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AuthorizedInStub
	fakeReturns := fake.authorizedInReturns
	fake.recordInvocation("AuthorizedIn", []interface{}{arg1, arg2, arg3})
	fake.authorizedInMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *NamespacePermissions) AuthorizedInCallCount() int {
	fake.authorizedInMutex.RLock()
	defer fake.authorizedInMutex.RUnlock()
	return len(fake.authorizedInArgsForCall)
}

func (fake *NamespacePermissions) AuthorizedInCalls(stub func(context.Context, authorization.Identity, string) (bool, error)) {
	fake.authorizedInMutex.Lock()
	defer fake.authorizedInMutex.Unlock()
	fake.AuthorizedInStub = stub
}

func (fake *NamespacePermissions) AuthorizedInArgsForCall(i int) (context.Context, authorization.Identity, string) {
	fake.authorizedInMutex.RLock()
	defer fake.authorizedInMutex.RUnlock()
	argsForCall := fake.authorizedInArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *NamespacePermissions) AuthorizedInReturns(result1 bool, result2 error) {
	fake.authorizedInMutex.Lock()
	defer fake.authorizedInMutex.Unlock()
	fake.AuthorizedInStub = nil
	fake.authorizedInReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *NamespacePermissions) AuthorizedInReturnsOnCall(i int, result1 bool, result2 error) {
	fake.authorizedInMutex.Lock()
	defer fake.authorizedInMutex.Unlock()
	fake.AuthorizedInStub = nil
	if fake.authorizedInReturnsOnCall == nil {
		fake.authorizedInReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.authorizedInReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *NamespacePermissions) GetAuthorizedOrgNamespaces(arg1 context.Context, arg2 authorization.Info) (map[string]bool, error) {
	fake.getAuthorizedOrgNamespacesMutex.Lock()
	ret, specificReturn := fake.getAuthorizedOrgNamespacesReturnsOnCall[len(fake.getAuthorizedOrgNamespacesArgsForCall)]
	fake.getAuthorizedOrgNamespacesArgsForCall = append(fake.getAuthorizedOrgNamespacesArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
	}{arg1, arg2})
	stub := fake.GetAuthorizedOrgNamespacesStub
	fakeReturns := fake.getAuthorizedOrgNamespacesReturns
	fake.recordInvocation("GetAuthorizedOrgNamespaces", []interface{}{arg1, arg2})
	fake.getAuthorizedOrgNamespacesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *NamespacePermissions) GetAuthorizedOrgNamespacesCallCount() int {
	fake.getAuthorizedOrgNamespacesMutex.RLock()
	defer fake.getAuthorizedOrgNamespacesMutex.RUnlock()
	return len(fake.getAuthorizedOrgNamespacesArgsForCall)
}

func (fake *NamespacePermissions) GetAuthorizedOrgNamespacesCalls(stub func(context.Context, authorization.Info) (map[string]bool, error)) {
	fake.getAuthorizedOrgNamespacesMutex.Lock()
	defer fake.getAuthorizedOrgNamespacesMutex.Unlock()
	fake.GetAuthorizedOrgNamespacesStub = stub
}

func (fake *NamespacePermissions) GetAuthorizedOrgNamespacesArgsForCall(i int) (context.Context, authorization.Info) {
	fake.getAuthorizedOrgNamespacesMutex.RLock()
	defer fake.getAuthorizedOrgNamespacesMutex.RUnlock()
	argsForCall := fake.getAuthorizedOrgNamespacesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *NamespacePermissions) GetAuthorizedOrgNamespacesReturns(result1 map[string]bool, result2 error) {
	fake.getAuthorizedOrgNamespacesMutex.Lock()
	defer fake.getAuthorizedOrgNamespacesMutex.Unlock()
	fake.GetAuthorizedOrgNamespacesStub = nil
	fake.getAuthorizedOrgNamespacesReturns = struct {
		result1 map[string]bool
		result2 error
	}{result1, result2}
}

func (fake *NamespacePermissions) GetAuthorizedOrgNamespacesReturnsOnCall(i int, result1 map[string]bool, result2 error) {
	fake.getAuthorizedOrgNamespacesMutex.Lock()
	defer fake.getAuthorizedOrgNamespacesMutex.Unlock()
	fake.GetAuthorizedOrgNamespacesStub = nil
	if fake.getAuthorizedOrgNamespacesReturnsOnCall == nil {
		fake.getAuthorizedOrgNamespacesReturnsOnCall = make(map[int]struct {
			result1 map[string]bool
			result2 error
		})
	}
	fake.getAuthorizedOrgNamespacesReturnsOnCall[i] = struct {
		result1 map[string]bool
		result2 error
	}{result1, result2}
}

func (fake *NamespacePermissions) GetAuthorizedSpaceNamespaces(arg1 context.Context, arg2 authorization.Info) (map[string]bool, error) {
	fake.getAuthorizedSpaceNamespacesMutex.Lock()
	ret, specificReturn := fake.getAuthorizedSpaceNamespacesReturnsOnCall[len(fake.getAuthorizedSpaceNamespacesArgsForCall)]
	fake.getAuthorizedSpaceNamespacesArgsForCall = append(fake.getAuthorizedSpaceNamespacesArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
	}{arg1, arg2})
	stub := fake.GetAuthorizedSpaceNamespacesStub
	fakeReturns := fake.getAuthorizedSpaceNamespacesReturns
	fake.recordInvocation("GetAuthorizedSpaceNamespaces", []interface{}{arg1, arg2})
	fake.getAuthorizedSpaceNamespacesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *NamespacePermissions) GetAuthorizedSpaceNamespacesCallCount() int {
	fake.getAuthorizedSpaceNamespacesMutex.RLock()
	defer fake.getAuthorizedSpaceNamespacesMutex.RUnlock()
	return len(fake.getAuthorizedSpaceNamespacesArgsForCall)
}

func (fake *NamespacePermissions) GetAuthorizedSpaceNamespacesCalls(stub func(context.Context, authorization.Info) (map[string]bool, error)) {
	fake.getAuthorizedSpaceNamespacesMutex.Lock()
	defer fake.getAuthorizedSpaceNamespacesMutex.Unlock()
	fake.GetAuthorizedSpaceNamespacesStub = stub
}

func (fake *NamespacePermissions) GetAuthorizedSpaceNamespacesArgsForCall(i int) (context.Context, authorization.Info) {
	fake.getAuthorizedSpaceNamespacesMutex.RLock()
	defer fake.getAuthorizedSpaceNamespacesMutex.RUnlock()
	argsForCall := fake.getAuthorizedSpaceNamespacesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *NamespacePermissions) GetAuthorizedSpaceNamespacesReturns(result1 map[string]bool, result2 error) {
	fake.getAuthorizedSpaceNamespacesMutex.Lock()
	defer fake.getAuthorizedSpaceNamespacesMutex.Unlock()
	fake.GetAuthorizedSpaceNamespacesStub = nil
	fake.getAuthorizedSpaceNamespacesReturns = struct {
		result1 map[string]bool
		result2 error
	}{result1, result2}
}

func (fake *NamespacePermissions) GetAuthorizedSpaceNamespacesReturnsOnCall(i int, result1 map[string]bool, result2 error) {
	fake.getAuthorizedSpaceNamespacesMutex.Lock()
	defer fake.getAuthorizedSpaceNamespacesMutex.Unlock()
	fake.GetAuthorizedSpaceNamespacesStub = nil
	if fake.getAuthorizedSpaceNamespacesReturnsOnCall == nil {
		fake.getAuthorizedSpaceNamespacesReturnsOnCall = make(map[int]struct {
			result1 map[string]bool
			result2 error
		})
	}
	fake.getAuthorizedSpaceNamespacesReturnsOnCall[i] = struct {
		result1 map[string]bool
		result2 error
	}{result1, result2}
}

func (fake *NamespacePermissions) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authorizedInMutex.RLock()
	defer fake.authorizedInMutex.RUnlock()
	fake.getAuthorizedOrgNamespacesMutex.RLock()
	defer fake.getAuthorizedOrgNamespacesMutex.RUnlock()
	fake.getAuthorizedSpaceNamespacesMutex.RLock()
	defer fake.getAuthorizedSpaceNamespacesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *NamespacePermissions) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repositories.NamespacePermissions = new(NamespacePermissions)
